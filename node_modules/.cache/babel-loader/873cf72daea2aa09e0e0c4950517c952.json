{"ast":null,"code":"var _jsxFileName = \"/Users/cihattasci/Desktop/product-list/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Product from './product';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [products, setProducts] = useState([]);\n  const [filteredDataSource, setFilteredDataSource] = useState([]);\n  useEffect(() => {\n    const obj = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'x-access-token': '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'\n      }\n    };\n    fetch(\"https://teknasyon.netlify.app/.netlify/functions/products\", obj).then(res => res.json()).then(result => {\n      console.log(result);\n      setProducts(result === null || result === void 0 ? void 0 : result.products);\n    }, error => {\n      setError(error);\n    });\n  }, []);\n\n  const handleChange = event => {\n    // let mainProducts = products;\n    // if (event.target.value === '' ) {\n    //   setProducts(mainProducts);\n    //   return\n    // }\n    // setInput(event.target.value);\n    // let filter = event.target.value.toUpperCase();\n    // const newProductArray = products?.filter(product => {\n    //   const itemData = product?.name\n    //         ? product?.name.toUpperCase()\n    //         : ''.toUpperCase();\n    //   return itemData.indexOf(filter) > -1\n    // })\n    // setProducts(newProductArray);\n    // Check if searched text is not blank\n    if (event.target.value) {\n      // Inserted text is not blank\n      // Filter the masterDataSource and update FilteredDataSource\n      const newData = products.filter(function (item) {\n        // Applying filter for the inserted text in search bar\n        const itemData = item.title ? item.title.toUpperCase() : ''.toUpperCase();\n        const textData = event.target.value.toUpperCase();\n        return itemData.indexOf(textData) > -1;\n      });\n      setFilteredDataSource(newData);\n      setInput(event.target.value);\n    } else {\n      // Inserted text is blank\n      // Update FilteredDataSource with masterDataSource\n      setFilteredDataSource(products);\n      setInput(event.target.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: 'white',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: input,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), filteredDataSource === null || filteredDataSource === void 0 ? void 0 : filteredDataSource.map(product => {\n      return /*#__PURE__*/_jsxDEV(Product, {\n        product: product\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"rDlm6fBt7bujvBjbHsKS6OxShAw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cihattasci/Desktop/product-list/src/App.js"],"names":["React","useState","useEffect","Product","App","input","setInput","error","setError","products","setProducts","filteredDataSource","setFilteredDataSource","obj","method","headers","fetch","then","res","json","result","console","log","handleChange","event","target","value","newData","filter","item","itemData","title","toUpperCase","textData","indexOf","backgroundColor","textAlign","map","product"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,kBAAD,EAAqBC,qBAArB,IAA8CX,QAAQ,CAAC,EAAD,CAA5D;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,GAAG,GAAG;AACVC,MAAAA,MAAM,EAAE,KADE;AAEVC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgB,kBAFT;AAGP,0BAAkB;AAHX;AAFC,KAAZ;AAQAC,IAAAA,KAAK,CAAC,2DAAD,EAA8DH,GAA9D,CAAL,CACGI,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAV,MAAAA,WAAW,CAACU,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEX,QAAT,CAAX;AACD,KANL,EAOKF,KAAD,IAAW;AACTC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KATL;AAWD,GApBQ,EAoBN,EApBM,CAAT;;AAsBA,QAAMgB,YAAY,GAAGC,KAAK,IAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF,QAAIA,KAAK,CAACC,MAAN,CAAaC,KAAjB,EAAwB;AACtB;AACA;AACA,YAAMC,OAAO,GAAGlB,QAAQ,CAACmB,MAAT,CACd,UAAUC,IAAV,EAAgB;AACd;AACA,cAAMC,QAAQ,GAAGD,IAAI,CAACE,KAAL,GACXF,IAAI,CAACE,KAAL,CAAWC,WAAX,EADW,GAEX,GAAGA,WAAH,EAFN;AAGA,cAAMC,QAAQ,GAAGT,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBM,WAAnB,EAAjB;AACA,eAAOF,QAAQ,CAACI,OAAT,CAAiBD,QAAjB,IAA6B,CAAC,CAArC;AACD,OARa,CAAhB;AAUArB,MAAAA,qBAAqB,CAACe,OAAD,CAArB;AACArB,MAAAA,QAAQ,CAACkB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AACD,KAfD,MAeO;AACL;AACA;AACAd,MAAAA,qBAAqB,CAACH,QAAD,CAArB;AACAH,MAAAA,QAAQ,CAACkB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AACD;AACA,GArCD;;AAuCA,sBACE;AAAK,IAAA,KAAK,EAAE;AAACS,MAAAA,eAAe,EAAE,OAAlB;AAA2BC,MAAAA,SAAS,EAAE;AAAtC,KAAZ;AAAA,4BACE;AAAU,MAAA,KAAK,EAAE/B,KAAjB;AAAwB,MAAA,QAAQ,EAAEkB;AAAlC;AAAA;AAAA;AAAA;AAAA,YADF,EAEGZ,kBAFH,aAEGA,kBAFH,uBAEGA,kBAAkB,CAAE0B,GAApB,CAAwBC,OAAO,IAAI;AAClC,0BACE,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,cADF;AAGD,KAJA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA7ED;;GAAMlC,G;;KAAAA,G;AA+EN,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Product from './product'\n\nconst App = () => {\n  const [input, setInput] = useState(\"\")\n  const [error, setError] = useState(null)\n  const [products, setProducts] = useState([])\n  const [filteredDataSource, setFilteredDataSource] = useState([]);\n\n  useEffect(() => {\n    const obj = {  \n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'x-access-token': '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',\n      },\n    }\n    fetch(\"https://teknasyon.netlify.app/.netlify/functions/products\", obj)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result)\n          setProducts(result?.products)\n        },\n        (error) => {\n          setError(error);\n        }\n      )\n  }, [])\n\n  const handleChange = event => {\n    // let mainProducts = products;\n    // if (event.target.value === '' ) {\n    //   setProducts(mainProducts);\n    //   return\n    // }\n    // setInput(event.target.value);\n    // let filter = event.target.value.toUpperCase();\n    // const newProductArray = products?.filter(product => {\n    //   const itemData = product?.name\n    //         ? product?.name.toUpperCase()\n    //         : ''.toUpperCase();\n    //   return itemData.indexOf(filter) > -1\n    // })\n    // setProducts(newProductArray);\n    // Check if searched text is not blank\n  if (event.target.value) {\n    // Inserted text is not blank\n    // Filter the masterDataSource and update FilteredDataSource\n    const newData = products.filter(\n      function (item) {\n        // Applying filter for the inserted text in search bar\n        const itemData = item.title\n            ? item.title.toUpperCase()\n            : ''.toUpperCase();\n        const textData = event.target.value.toUpperCase();\n        return itemData.indexOf(textData) > -1;\n      }\n    );\n    setFilteredDataSource(newData);\n    setInput(event.target.value);\n  } else {\n    // Inserted text is blank\n    // Update FilteredDataSource with masterDataSource\n    setFilteredDataSource(products);\n    setInput(event.target.value);\n  }\n  }\n\n  return (\n    <div style={{backgroundColor: 'white', textAlign: 'center'}}>\n      <textarea value={input} onChange={handleChange} />\n      {filteredDataSource?.map(product => {\n        return (\n          <Product product={product} />\n        )\n      })}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}